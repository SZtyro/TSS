/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.9
 * Generated at: 2020-06-19 06:05:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import pl.data.CRUD;
import pl.data.DataLogic;
import pl.resources.Osoba;
import java.util.Map;
import java.util.ArrayList;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/fabix/Desktop/TSS/tss/WebApplicationFT/build/web/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153377882000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1592546703535L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("pl.resources.Osoba");
    _jspx_imports_classes.add("pl.data.CRUD");
    _jspx_imports_classes.add("pl.data.DataLogic");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1250\">\r\n");
      out.write("        <title>JSP Page</title>\r\n");
      out.write("        <script src=\"js/canvasjs.min.js\"></script>\r\n");
      out.write("        <script language=\"javascript\" type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("            var wsUri = getRootUri() + \"/WebApplicationFT/endpoint\";\r\n");
      out.write("            function getRootUri() {\r\n");
      out.write("                var wsUri = (location.protocol === \"http:\" ? \"ws://\" : \"wss://\");\r\n");
      out.write("                return wsUri + (document.location.hostname === \"\" ?\r\n");
      out.write("                        \"localhost\" :\r\n");
      out.write("                        document.location.hostname) + \":\" +\r\n");
      out.write("                        (document.location.port === \"\" ? \"8080\" :\r\n");
      out.write("                                document.location.port);\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            function init() {\r\n");
      out.write("                output = document.getElementById(\"output\");\r\n");
      out.write("                initWebSocket();\r\n");
      out.write("            }\r\n");
      out.write("            function initWebSocket() {\r\n");
      out.write("                websocket = new WebSocket(wsUri);\r\n");
      out.write("                websocket.onopen = function (evt) {\r\n");
      out.write("                    onOpen(evt);\r\n");
      out.write("                };\r\n");
      out.write("                websocket.onmessage = function (evt) {\r\n");
      out.write("                    onMessage(evt);\r\n");
      out.write("                };\r\n");
      out.write("                websocket.onerror = function (evt) {\r\n");
      out.write("                    onError(evt);\r\n");
      out.write("                };\r\n");
      out.write("               \r\n");
      out.write("            }\r\n");
      out.write("            ;\r\n");
      out.write("\r\n");
      out.write("            function onOpen(evt) {\r\n");
      out.write("                writeToScreen(\"connected\");\r\n");
      out.write("            }\r\n");
      out.write("            function onMessage(evt) {\r\n");
      out.write("                writeToScreen(evt.data);\r\n");
      out.write("                var json = JSON.parse(evt.data);\r\n");
      out.write("                var d = [];\r\n");
      out.write("                for(i=0; i<json.length ;i++){\r\n");
      out.write("                    d.push({y:json[i]});\r\n");
      out.write("                    \r\n");
      out.write("                }\r\n");
      out.write("                var chart = new CanvasJS.Chart(\"chartContainer\", {\r\n");
      out.write("                    title: {\r\n");
      out.write("                        text: \"Losowe liczby\"\r\n");
      out.write("                    },\r\n");
      out.write("                    data: [\r\n");
      out.write("                        {\r\n");
      out.write("                            // Change type to \"doughnut\", \"line\", \"splineArea\", etc.\r\n");
      out.write("                            type: \"column\",\r\n");
      out.write("                            dataPoints: d\r\n");
      out.write("                        }\r\n");
      out.write("                    ]\r\n");
      out.write("                });\r\n");
      out.write("                chart.render();\r\n");
      out.write("            }\r\n");
      out.write("            function onError(evt) {\r\n");
      out.write("                writeToScreen(\"error\" + evt.data);\r\n");
      out.write("            }\r\n");
      out.write("            function doSend(msg) {\r\n");
      out.write("                writeToScreen(\"sent\" + msg);\r\n");
      out.write("                websocket.send(msg);\r\n");
      out.write("                \r\n");
      out.write("            }\r\n");
      out.write("            function writeToScreen(msg) {\r\n");
      out.write("                var pre = document.getElementById(\"messageID\");\r\n");
      out.write("                pre.innerHTML = msg;\r\n");
      out.write("                //pre.value = msg;\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("            window.addEventListener(\"load\", init, false);\r\n");
      out.write("           \r\n");
      out.write("        </script>\r\n");
      out.write("    </head>\r\n");
      out.write("\r\n");
      out.write("    <body bgcolor=\"#e0e0e0\" >\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <h1>Autor projektu: </h1>\r\n");
      out.write("        <p>Fabian Trubic</p>\r\n");
      out.write("\r\n");
      out.write("        ");

            //java.util.Date date = new java.util.Date();
            //out.println("<p>" + date + "</p>");
            //DataLogic logic = new DataLogic();
            //CRUD crud = new CRUD();
            //crud.setLogic(logic);
            //ArrayList<Osoba> li = crud.fetchData();
            //logic.fetchData();
            

            //request.setAttribute("connection", logic.connection);
            //request.setAttribute("logic", logic);
            //request.setAttribute("list", li);
            //request.setAttribute("logic", logic);
        
      out.write("\r\n");
      out.write("        <!--\r\n");
      out.write("        <br>\r\n");
      out.write("        <h1>Logowanie do bazy:</h1>\r\n");
      out.write("        <p><i><strong>host:</strong> 155.158.112.31 <strong>user:</strong> tomcatuser <strong>password:</strong> tomcat</i></p>\r\n");
      out.write("        <br>\r\n");
      out.write("        <form method=\"post\" action=\"mainServlet?method=login\">\r\n");
      out.write("            <input type=\"text\" name=\"host\" value=\"155.158.112.31\">\r\n");
      out.write("            <input type=\"text\" name=\"user\" value=\"tomcatuser\">\r\n");
      out.write("            <input type=\"password\" name=\"password\" value=\"tomcat\">      \r\n");
      out.write("            <input type=\"submit\" value=\"Zaloguj\">\r\n");
      out.write("        </form>\r\n");
      out.write("        <br>\r\n");
      out.write("        -->\r\n");
      out.write("        <form  method=\"get\" action=\"mainServlet\">\r\n");
      out.write("            <input type=\"submit\" value=\"Baza danych\">\r\n");
      out.write("        </form>\r\n");
      out.write("        \r\n");
      out.write("        <br>\r\n");
      out.write("        <h1>Komunikacja z WS</h1>\r\n");
      out.write("        <p id=\"messageID\"></p>\r\n");
      out.write("   \r\n");
      out.write("        <button onclick=\"doSend()\"> Generuj wykres </button>\r\n");
      out.write("        <div id=\"chartContainer\" style=\"width: 70%;margin: 0 auto\">\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
